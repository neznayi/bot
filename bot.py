import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

class NoHTTPFilter(logging.Filter):
    def filter(self, record: logging.LogRecord) -> bool:
        msg = record.getMessage()
        return not msg.startswith("HTTP Request:")


BOT_TOKEN = "7249869508:AAEdvohNBIOst-rMMG08-IgfPMOtKqQ6yqw"
CHANNEL_LINKS = {
    "lose_weight": "https://t.me/amyrskiu_parnisha",
    "gain_mass":   "https://t.me/amyrskiu_parnisha",
    "workout":     "https://t.me/amyrskiu_parnisha",
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text == "/start":
        user = update.effective_user
        logger.info(f"/start –æ—Ç {user.full_name} (ID: {user.id})")

        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name or '–¥—Ä—É–≥'}!\n\n"
            "–Ø ‚Äî —Ç–≤–æ–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω—Ç–æ–Ω, "
            "—è —Ç—Ä–µ–Ω–µ—Ä —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, —Ä–∞–±–æ—Ç–∞—é –≤ –ø–æ–ª–∏—Ü–∏–∏ –∏ –ª—é–±–ª—é –¥–æ—Å–∫–∏ –∏ –º–∏—à–∫–∏–Ω&–º–∏—à–∫–∏–Ω.\n\n"
            "–†–∞–±–æ—Ç–∞—é —Å–æ –≤—Å–µ–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º—Å—è —Å —Ç–≤–æ–∏–º–∏ —Ü–µ–ª—è–º–∏:"
        )

        keyboard = [
            [InlineKeyboardButton("üí™ –ü–æ—Ö—É–¥–µ–Ω–∏–µ",         callback_data="lose_weight")],
            [InlineKeyboardButton("üèãÔ∏è –ù–∞–±–æ—Ä –º–∞—Å—Å—ã",      callback_data="gain_mass")],
            [InlineKeyboardButton("ü§∏ –û–±—É—á–µ–Ω–∏–µ –≤–æ—Ä–∫–∞—É—Ç—É", callback_data="workout")],
        ]

        await update.message.reply_text(
            welcome_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ ===
async def handle_goal_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    goal = query.data
    link = CHANNEL_LINKS.get(goal)
    logger.info(f"–í—ã–±–æ—Ä —Ü–µ–ª–∏ '{goal}' –æ—Ç {user.full_name} (ID: {user.id})")

    if link:
        await query.edit_message_text(
            f"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ª—É—á–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Å—Å—ã–ª–∫–µ üëá\n\n{link}"
        )
    else:
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ü–µ–ª–∏ '{goal}'")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_goal_selection))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
